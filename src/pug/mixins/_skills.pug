//- ===================================================================================
  Creates Skill Name Field or Select for compoundSkills.
  @param  {String} skillAttrName  Roll20 "attr_" name for skill as attribute
  @param  {Object} skillData      an Object containing skillName, skillGroup
//- ===================================================================================
mixin skillNameField(skillAttrName, skillData, additionalData)
  if (skillData.skillGroup)
    - var baseClass = 'cp-2020__skill__name--view'
    label(
      class=`${baseClass} ${baseClass}`
      for=`attr_${skillAttrName}_expanded`
    )
      select.cp-2020__skill__name--edit(name=`attr_${skillAttrName}_name`)
        each skillName in skillData.skillGroup
          each skill in additionalData
            if (skill.skillName === skillName)
              option(value=skillName)=skillName
                span.cp-2020__skill-stat=` [${skill.baseAttribute}]`
      input(
        type='checkbox'
        name=`attr_${skillAttrName}_expanded`
        id=`attr_${skillAttrName}_expanded`
        value='expanded'
      )
      div.cp-2020__skill__name__carat

  else
    label.cp-2020__skill__name--view=skillData.skillName
      span.cp-2020__skill-stat=` [${skillData.baseAttribute}]`
      input(type='checkbox' name=`attr_${skillAttrName}_expanded` value='expanded')
      div.cp-2020__skill__name__carat

//- ===================================================================================
  Creates Skill descriptions. Complicated by compound skills
  @param  {String} skillAttrName  Roll20 "attr_" name for skill as attribute
  @param  {Object} skillData      an Object containing skillGroup and description
  @param  {Array} additionalData an Array made up of skillData objects used for compound options to render a select to choose the proper skill
//- ===================================================================================
mixin skillDescription(skillAttrName, skillData, additionalData)
  input(name=`attr_${skillAttrName}_isExpanded` disabled='true' type='hidden' value=`@{${skillAttrName}_expanded}`)
  if (skillData.skillGroup)
    input.cp-2020__skill__name(type='hidden' disabled='true' name=`attr_${skillAttrName}_name-toggle` value=`@{${skillAttrName}_name}`)
    each skillName in skillData.skillGroup
      each skill in additionalData
        if skillName === skill.skillName
          - var descriptionClass = `cp-2020__skill-${nameToSelector(skill.skillName)}__description`
          span(class=`cp-2020__skill__description ${descriptionClass}`)=skill.description
  else
    input.cp-2020__skill__name--edit(type='hidden' name=`attr_${skillAttrName}_name`)
    span.cp-2020__skill__description=skillData.description

//- ===================================================================================
  Creates Skill Stats (Level, IP Multiplier, roll button etc.).
  @param  {String} skillAttrName  Roll20 "attr_" name for skill as attribute
  @param  {Object} skillData      an Object containing skillGroup and description
  @param  {Array} additionalData an Array made up of skillData objects used for compoundSkills to render a select to choose the proper skill (for IpMultiplier dependency)
//- ===================================================================================
mixin skillStats(skillAttrName, skillData, additionalData)
  label.cp-2020__skill__stat-wrapper(for=`${skillAttrName}_roll`)
    div.cp-2020__stat-group
      span(class='cp-2020__skill__lvl--view cp-2020__stat-group__value')
        //- TODO: use a worker for this crap -- on load + on drop-down change + level change
        span(name=`attr_${skillAttrName}_level`)
        span &sol;
        span(name=`attr_${skillAttrName}_roll_total`)

      input(class='cp-2020__skill__lvl cp-2020__skill--edit cp-2020__stat-group__value' type='number' value='0' min='0' max='10' name=`attr_${skillAttrName}_level`)
      span.cp-2020__stat-group__label lvl/tot

    //- TODO: use a worker for this crap -- be sure to re-calculate based on wounds
    +rollBtn(
      skillAttrName,
      skillAttrName,
      `&{template:skill-check-template}
        {{skill=${skillData.skillName}}}
        {{handle=@{handle}}}
        {{skillLevel=@{${skillAttrName}_level}}}
        {{stat=@{${skillData.baseAttribute}}}}
        {{statName=${skillData.baseAttribute}}}
        {{total=[[1d10!!+@{${skillAttrName}_level}+?{Modifier|0}]]}}
        {{fumble=[[1d10]]}}`
    ).cp-2020__skill__roll

    div(class='cp-2020__stat-group cp-2020__skill--edit')
      input.cp-2020__stat-group__value(
        type='number'
        value='0'
        name=`attr_${skillAttrName}_ip`
      )
      span.cp-2020__stat-group__label ip

    div(class='cp-2020__stat-group cp-2020__skill--edit')
      span.cp-2020__stat-group__value(
        name=`attr_${skillAttrName}_next_level`
      )
      span.cp-2020__stat-group__label lvl up

//- ===================================================================================
  Creates Skill fields with accompanying markup that have both edit and use fields shown/hidden via css by the use/learn tabs
  @param  {Object} skillData      an Object containing skillName, baseAttribute, modifier, ipMultiplier, specialAbility, description, notes, and career keys loaded from data JSON files
  @param  {Array} additionalData an Array made up of skillData objects used for compound options to render a select to choose the proper skill
//- ===================================================================================
mixin skillField(skillData, additionalData)
  - var skillAttrName = `Skill_${nameToSelector(skillData.skillName).replace(/\-/g, '_')}`
  - var skillClass = `cp-2020__skill-${nameToSelector(skillData.skillName)}`

  input.cp-2020__skill-learned(type='hidden' disabled='true' name=`attr_${skillAttrName}_learned` value=`@{${skillAttrName}_level}`)
  +box(class=`cp-2020__skill ${skillClass}`)
    div.cp-2020__skill__wrapper
      div.cp-2020__skill__title-wrapper
        +skillNameField(skillAttrName, skillData, additionalData)
        +skillStats(skillAttrName, skillData, additionalData)
      +skillDescription(skillAttrName, skillData, additionalData)